@page "/"

<style>
    body {
        background-color: @BgColor;
        transition: background-color 2s ease-out;
    }

    @@keyframes activity-in-progress {
        0%{
            background-color: hsl(@CurActivityBarColor 99% 27%);
        }
        50%{
            background-color: hsl(@CurActivityBarColor 99% 44%);
        }
        100%{
            background-color: hsl(@CurActivityBarColor 99% 27%);
        }    
    }

    
    .blazor-side-bar-to-hide {
        display: @CurNavBarDisplay;
        visibility: @CurNavBarVisibility;
    }

</style>

@* <section class="d-flex flex-row text-center mb-5 gap-5">
    @{if(MainTimerState == TimerState.NotStarted)
    {
        <button Class="" @onclick="() => PrevSession()">&lt;  Prev </button>
        <button Class="" @onclick="() => RestartFullPomSession()">Reset</button>
        <button class="" @onclick="() => NextSession()">Skip ></button>
    }}
</section> *@


<div class="container text-center my-5">
    <div class="row">
        @{
            if (MainTimerState == TimerState.NotStarted)
            {
                <div class="col-4"><button Class="" @onclick="() => PrevSession()">&lt;  Prev </button></div>
                <div class="col-4"><button Class="" @onclick="() => RestartFullPomSession()">Reset</button></div>
                <div class="col-4"><button class="" @onclick="() => NextSession()">Skip ></button></div>
            }
        }
    </div>
</div>



@* <p>@IntilaizationTimeString</p> *@
@{
    if(MainTimerState != TimerState.NotStarted)
    {
        <div id="color-bar">
            &nbsp
        </div>
    }

}


<section id="set-info-UI-display">
    <div class="container mb-5">
        <div class="row gap-xs-4">
            <div class="col-lg-4 col-sm-6">Finished work sessions: @CompletedWorkSessionCount of @CurPomodoroSet.RepsBeforeLongBreak</div>
            <div class="col-lg-4 col-sm-6">Work time: @CurPomodoroSet.WorkTime</div>
            <div class="col-lg-4 col-sm-6">Break times: @CurPomodoroSet.ShortBreak - @CurPomodoroSet.LongBreak</div>
        </div>
    </div>
</section>

<section class="text-center mt-5 mb-3">
    <h6 class="my-5 fw-bold">@AltWorkStateDisplay[0] @AltWorkStateDisplay[1]</h6>
    <h4>Time left</h4>
    <div class="fs-3">
        @{
            <p>@CountdownTimerDisplay</p>
        }
    </div>
</section>
<section class=" mb-5">
    <div id="primary-btn-flex" class="fixed-bottom mb-5">

        <div style="align-items: center; display: flex; justify-content: center;">
            @{
                if (MainTimerState == TimerState.NotStarted)
                {
                    <button class="btn btn-custom-start" style="max-width:75%; min-width:50%" @onclick="() => StartTimer(CurPomodoroSet)">Start</button>
                }
                if (MainTimerState == TimerState.Paused)
                {
                    <button class="btn btn-secondary" style="max-width:36%; min-width:35%" @onclick="() => ContinueTimer()">Continue</button>
                    <button class="btn btn-custom-stop" style="max-width:36%; min-width:35%"  @onclick="() => CancelSessionAndMakeItRepeatable()">Cancel session</button>
                }
                if (MainTimerState == TimerState.Started)
                {
                    <button class="btn custom-cancel-btn" @onclick="() => PauseTimer()">Pause</button>
                    <button class="btn btn-custom-stop" @onclick="() => CancelSessionAndMakeItRepeatable()">Cancel session</button>
                }
            }
        </div>
    </div>
</section>

@code {
    // string j = Path.Combine(AppContext.BaseDirectory, "preferredDir.json");
}