@page "/"

<section>
    <div class="container mb-5">
        <div class="row">
            <div class="col-6">Work sessions: @SessionCount of @CurPomodoroSet.RepsBeforeLongBreak</div>
            <div class="col-6">Work time: @CurPomodoroSet.WorkTime</div>
            <div class="col-6">@CurWorkStateDisplay</div>
            <div class="col-6">Break times: @CurPomodoroSet.ShortBreak - @CurPomodoroSet.LongBreak</div>
        </div>
    </div>
</section>

<section class="text-center mb-3">
    <h4>Time left</h4>
    <div class="fs-3">
        @{
            <p>@PrintCountdownTimer()</p>
        }
     </div>
</section>

<div class="btn-group gap-5" role="group" aria-label="Basic example">
    @{
        if (MainTimerState == TimerState.NotStarted)
        {
            <button class="btn btn-custom-start" @onclick="() => StartTimer(CurPomodoroSet)">Start</button>
        }
        if(MainTimerState == TimerState.Paused)
        {
            <button class="btn btn-secondary" @onclick="() => ContinueTimer()">Continue</button>
            <button class="btn btn-custom-stop" @onclick="() => EndSessionAndTimer(CurPomodoroSet)">End session</button>
        }
        if(MainTimerState == TimerState.Started)
        {
            <button class="btn custom-cancel-btn" @onclick="() => PauseTimer()">Pause</button>
            <button class="btn btn-custom-stop" @onclick="() => EndSessionAndTimer(CurPomodoroSet)">End session</button>
        }
    }
</div>

@code{
    // string j = Path.Combine(AppContext.BaseDirectory, "preferredDir.json");
}